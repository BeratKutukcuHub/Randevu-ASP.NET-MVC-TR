// <auto-generated />
using System;
using DataAccess.DbContextEfCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(EntityFrameworkDbContext))]
    [Migration("20241228120340_FirstCommit")]
    partial class FirstCommit
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.EntityAppointment", b =>
                {
                    b.Property<int>("EntityAppointmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityAppointmentId"));

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("DateInAppointment")
                        .HasColumnType("datetime2");

                    b.Property<int>("EntityDepartmentId")
                        .HasColumnType("int");

                    b.Property<int>("EntitySectionId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityAppointmentId");

                    b.HasIndex("EntityDepartmentId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("Entities.EntityDepartment", b =>
                {
                    b.Property<int>("EntityDepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityDepartmentId"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityDepartmentId");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            EntityDepartmentId = 1,
                            DepartmentName = "Dahiliye (İç Hastalıkları)"
                        },
                        new
                        {
                            EntityDepartmentId = 2,
                            DepartmentName = "Genel Cerrahi"
                        },
                        new
                        {
                            EntityDepartmentId = 3,
                            DepartmentName = "Kadın Doğum (Obstetrik ve Jinekoloji)"
                        },
                        new
                        {
                            EntityDepartmentId = 4,
                            DepartmentName = "Radyoloji"
                        },
                        new
                        {
                            EntityDepartmentId = 5,
                            DepartmentName = "Pediatri (Çocuk Sağlığı ve Hastalıkları)"
                        },
                        new
                        {
                            EntityDepartmentId = 6,
                            DepartmentName = "Göz Hastalıkları (Oftalmoloji)"
                        },
                        new
                        {
                            EntityDepartmentId = 7,
                            DepartmentName = "Kulak Burun Boğaz (KBB)"
                        },
                        new
                        {
                            EntityDepartmentId = 8,
                            DepartmentName = "Nöroloji"
                        },
                        new
                        {
                            EntityDepartmentId = 9,
                            DepartmentName = "Ortopedi"
                        },
                        new
                        {
                            EntityDepartmentId = 10,
                            DepartmentName = "Psikiyatri"
                        },
                        new
                        {
                            EntityDepartmentId = 11,
                            DepartmentName = "Oral ve Diş Sağlığı"
                        },
                        new
                        {
                            EntityDepartmentId = 12,
                            DepartmentName = "Fizyoterapi ve Rehabilitasyon"
                        });
                });

            modelBuilder.Entity("Entities.EntityPerson", b =>
                {
                    b.Property<int>("EntityPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntityPersonId"));

                    b.Property<bool?>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("Age")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("E_Mail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EntitySectionId")
                        .HasColumnType("int");

                    b.Property<string>("PersonLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMedia1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SocialMedia2")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntityPersonId");

                    b.HasIndex("EntitySectionId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Entities.EntitySection", b =>
                {
                    b.Property<int>("EntitySectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EntitySectionId"));

                    b.Property<int>("EntityDepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EntitySectionId");

                    b.HasIndex("EntityDepartmentId");

                    b.ToTable("Sections");

                    b.HasData(
                        new
                        {
                            EntitySectionId = 1,
                            EntityDepartmentId = 1,
                            SectionName = "Kardiyoloji"
                        },
                        new
                        {
                            EntitySectionId = 2,
                            EntityDepartmentId = 1,
                            SectionName = "Gastroenteroloji"
                        },
                        new
                        {
                            EntitySectionId = 3,
                            EntityDepartmentId = 1,
                            SectionName = "Nefroloji"
                        },
                        new
                        {
                            EntitySectionId = 4,
                            EntityDepartmentId = 1,
                            SectionName = "Endokrinoloji"
                        },
                        new
                        {
                            EntitySectionId = 5,
                            EntityDepartmentId = 1,
                            SectionName = "Pulmonoloji"
                        },
                        new
                        {
                            EntitySectionId = 6,
                            EntityDepartmentId = 1,
                            SectionName = "Hematoloji"
                        },
                        new
                        {
                            EntitySectionId = 7,
                            EntityDepartmentId = 2,
                            SectionName = "Kolon ve Rektum Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 8,
                            EntityDepartmentId = 2,
                            SectionName = "Gastrointestinal Cerrahi"
                        },
                        new
                        {
                            EntitySectionId = 9,
                            EntityDepartmentId = 2,
                            SectionName = "Meme Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 10,
                            EntityDepartmentId = 2,
                            SectionName = "Tiroid ve Paratiroid Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 11,
                            EntityDepartmentId = 2,
                            SectionName = "Yara Bakımı ve Travma Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 12,
                            EntityDepartmentId = 3,
                            SectionName = "Obstetrik (Doğum Bilimi)"
                        },
                        new
                        {
                            EntitySectionId = 13,
                            EntityDepartmentId = 3,
                            SectionName = "Jinekoloji"
                        },
                        new
                        {
                            EntitySectionId = 14,
                            EntityDepartmentId = 4,
                            SectionName = "Röntgen"
                        },
                        new
                        {
                            EntitySectionId = 15,
                            EntityDepartmentId = 4,
                            SectionName = "Bilgisayarlı Tomografi (BT)"
                        },
                        new
                        {
                            EntitySectionId = 16,
                            EntityDepartmentId = 4,
                            SectionName = "Manyetik Rezonans Görüntüleme (MR)"
                        },
                        new
                        {
                            EntitySectionId = 17,
                            EntityDepartmentId = 4,
                            SectionName = "Ultrasonografi (USG)"
                        },
                        new
                        {
                            EntitySectionId = 18,
                            EntityDepartmentId = 4,
                            SectionName = "Nükleer Tıp (Sintigrafi)"
                        },
                        new
                        {
                            EntitySectionId = 19,
                            EntityDepartmentId = 5,
                            SectionName = "Genel Pediatri"
                        },
                        new
                        {
                            EntitySectionId = 20,
                            EntityDepartmentId = 5,
                            SectionName = "Neonatoloji"
                        },
                        new
                        {
                            EntitySectionId = 21,
                            EntityDepartmentId = 5,
                            SectionName = "Çocuk Enfeksiyon Hastalıkları"
                        },
                        new
                        {
                            EntitySectionId = 22,
                            EntityDepartmentId = 5,
                            SectionName = "Çocuk Nefrolojisi"
                        },
                        new
                        {
                            EntitySectionId = 23,
                            EntityDepartmentId = 5,
                            SectionName = "Çocuk Kardiyolojisi"
                        },
                        new
                        {
                            EntitySectionId = 24,
                            EntityDepartmentId = 5,
                            SectionName = "Çocuk Endokrinolojisi"
                        },
                        new
                        {
                            EntitySectionId = 25,
                            EntityDepartmentId = 5,
                            SectionName = "Çocuk Psikiyatrisi"
                        },
                        new
                        {
                            EntitySectionId = 26,
                            EntityDepartmentId = 6,
                            SectionName = "Genel Oftalmoloji"
                        },
                        new
                        {
                            EntitySectionId = 27,
                            EntityDepartmentId = 6,
                            SectionName = "Katarakt Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 28,
                            EntityDepartmentId = 6,
                            SectionName = "Retina ve Vitreus Hastalıkları"
                        },
                        new
                        {
                            EntitySectionId = 29,
                            EntityDepartmentId = 6,
                            SectionName = "Kornea Hastalıkları ve Kornea Transplantasyonu"
                        },
                        new
                        {
                            EntitySectionId = 30,
                            EntityDepartmentId = 6,
                            SectionName = "Glaukom (Göz Tansiyonu) Tedavisi"
                        },
                        new
                        {
                            EntitySectionId = 31,
                            EntityDepartmentId = 6,
                            SectionName = "Pediyatrik Oftalmoloji"
                        },
                        new
                        {
                            EntitySectionId = 32,
                            EntityDepartmentId = 6,
                            SectionName = "Plastik ve Rekonstrüktif Göz Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 33,
                            EntityDepartmentId = 6,
                            SectionName = "Üveit (Göz İçi İltihabı) Tedavisi"
                        },
                        new
                        {
                            EntitySectionId = 34,
                            EntityDepartmentId = 6,
                            SectionName = "Orbita ve Oküloplasti"
                        },
                        new
                        {
                            EntitySectionId = 35,
                            EntityDepartmentId = 7,
                            SectionName = "Kulak Hastalıkları"
                        },
                        new
                        {
                            EntitySectionId = 36,
                            EntityDepartmentId = 7,
                            SectionName = "Burun ve Sinüs Hastalıkları"
                        },
                        new
                        {
                            EntitySectionId = 37,
                            EntityDepartmentId = 7,
                            SectionName = "Boğaz Hastalıkları"
                        },
                        new
                        {
                            EntitySectionId = 38,
                            EntityDepartmentId = 7,
                            SectionName = "Baş ve Boyun Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 39,
                            EntityDepartmentId = 7,
                            SectionName = "Çocuklar için Kulak Burun Boğaz"
                        },
                        new
                        {
                            EntitySectionId = 40,
                            EntityDepartmentId = 8,
                            SectionName = "Baş Ağrıları ve Migren Tedavisi"
                        },
                        new
                        {
                            EntitySectionId = 41,
                            EntityDepartmentId = 8,
                            SectionName = "Epilepsi ve Nöbet Bozuklukları"
                        },
                        new
                        {
                            EntitySectionId = 42,
                            EntityDepartmentId = 8,
                            SectionName = "Nöromüsküler Hastalıklar"
                        },
                        new
                        {
                            EntitySectionId = 43,
                            EntityDepartmentId = 8,
                            SectionName = "İnme (Stroke)"
                        },
                        new
                        {
                            EntitySectionId = 44,
                            EntityDepartmentId = 8,
                            SectionName = "Hareket Bozuklukları"
                        },
                        new
                        {
                            EntitySectionId = 45,
                            EntityDepartmentId = 8,
                            SectionName = "Demyelinizan Hastalıklar"
                        },
                        new
                        {
                            EntitySectionId = 46,
                            EntityDepartmentId = 8,
                            SectionName = "Nöroonkoloji"
                        },
                        new
                        {
                            EntitySectionId = 47,
                            EntityDepartmentId = 8,
                            SectionName = "Nöroimmünoloji"
                        },
                        new
                        {
                            EntitySectionId = 48,
                            EntityDepartmentId = 8,
                            SectionName = "Nörofizyoloji"
                        },
                        new
                        {
                            EntitySectionId = 49,
                            EntityDepartmentId = 9,
                            SectionName = "Artroplasti (Eklem Protezi)"
                        },
                        new
                        {
                            EntitySectionId = 50,
                            EntityDepartmentId = 9,
                            SectionName = "Travmatoloji"
                        },
                        new
                        {
                            EntitySectionId = 51,
                            EntityDepartmentId = 9,
                            SectionName = "Pediatrik Ortopedi"
                        },
                        new
                        {
                            EntitySectionId = 52,
                            EntityDepartmentId = 9,
                            SectionName = "Omurga Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 53,
                            EntityDepartmentId = 9,
                            SectionName = "El ve Üst Ekstremite Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 54,
                            EntityDepartmentId = 9,
                            SectionName = "Ayak ve Ayak Bileği Cerrahisi"
                        },
                        new
                        {
                            EntitySectionId = 55,
                            EntityDepartmentId = 9,
                            SectionName = "Ortopedik Onkoloji"
                        },
                        new
                        {
                            EntitySectionId = 56,
                            EntityDepartmentId = 9,
                            SectionName = "Ortopedik Rehabilitasyon"
                        },
                        new
                        {
                            EntitySectionId = 57,
                            EntityDepartmentId = 10,
                            SectionName = "Genel Psikiyatri"
                        },
                        new
                        {
                            EntitySectionId = 58,
                            EntityDepartmentId = 10,
                            SectionName = "Çocuk ve Ergen Psikiyatrisi"
                        },
                        new
                        {
                            EntitySectionId = 59,
                            EntityDepartmentId = 10,
                            SectionName = "Bağımlılık Psikiyatrisi"
                        },
                        new
                        {
                            EntitySectionId = 60,
                            EntityDepartmentId = 10,
                            SectionName = "Ruhsal Sağlık ve Psikoterapi"
                        },
                        new
                        {
                            EntitySectionId = 61,
                            EntityDepartmentId = 10,
                            SectionName = "Klinik Psikofarmakoloji"
                        },
                        new
                        {
                            EntitySectionId = 62,
                            EntityDepartmentId = 10,
                            SectionName = "Acil Psikiyatri"
                        },
                        new
                        {
                            EntitySectionId = 63,
                            EntityDepartmentId = 10,
                            SectionName = "Geropsikiyatri"
                        },
                        new
                        {
                            EntitySectionId = 64,
                            EntityDepartmentId = 10,
                            SectionName = "Adli Psikiyatri"
                        },
                        new
                        {
                            EntitySectionId = 65,
                            EntityDepartmentId = 11,
                            SectionName = "Genel Diş Hekimliği"
                        },
                        new
                        {
                            EntitySectionId = 66,
                            EntityDepartmentId = 11,
                            SectionName = "Periodontoloji"
                        },
                        new
                        {
                            EntitySectionId = 67,
                            EntityDepartmentId = 11,
                            SectionName = "Endodonti"
                        },
                        new
                        {
                            EntitySectionId = 68,
                            EntityDepartmentId = 11,
                            SectionName = "Ortodonti"
                        },
                        new
                        {
                            EntitySectionId = 69,
                            EntityDepartmentId = 11,
                            SectionName = "Oral ve Maksillofasiyal Cerrahi"
                        },
                        new
                        {
                            EntitySectionId = 70,
                            EntityDepartmentId = 11,
                            SectionName = "Prostodonti"
                        },
                        new
                        {
                            EntitySectionId = 71,
                            EntityDepartmentId = 11,
                            SectionName = "Estetik Diş Hekimliği"
                        },
                        new
                        {
                            EntitySectionId = 72,
                            EntityDepartmentId = 12,
                            SectionName = "Ortopedik Fizyoterapi"
                        },
                        new
                        {
                            EntitySectionId = 73,
                            EntityDepartmentId = 12,
                            SectionName = "Nörolojik Fizyoterapi"
                        },
                        new
                        {
                            EntitySectionId = 74,
                            EntityDepartmentId = 12,
                            SectionName = "Kardiyopulmoner Fizyoterapi"
                        },
                        new
                        {
                            EntitySectionId = 75,
                            EntityDepartmentId = 12,
                            SectionName = "Pediyatrik Fizyoterapi"
                        },
                        new
                        {
                            EntitySectionId = 76,
                            EntityDepartmentId = 12,
                            SectionName = "Geriyatrik Fizyoterapi"
                        },
                        new
                        {
                            EntitySectionId = 77,
                            EntityDepartmentId = 12,
                            SectionName = "Spor Fizyoterapisi"
                        },
                        new
                        {
                            EntitySectionId = 78,
                            EntityDepartmentId = 12,
                            SectionName = "Fiziksel Tıp ve Rehabilitasyon"
                        },
                        new
                        {
                            EntitySectionId = 79,
                            EntityDepartmentId = 12,
                            SectionName = "Onkolojik Fizyoterapi"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "20a750c6-264d-40ac-a079-22462ca72b23",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "f46e5901-5936-4312-a1af-daf71e0acb53",
                            Name = "Personal",
                            NormalizedName = "PERSONAL"
                        },
                        new
                        {
                            Id = "3aafdfb6-aab9-4220-9979-1cb721dad9fe",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.EntityAppointment", b =>
                {
                    b.HasOne("Entities.EntityDepartment", "EntityDepartment")
                        .WithMany()
                        .HasForeignKey("EntityDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityDepartment");
                });

            modelBuilder.Entity("Entities.EntityPerson", b =>
                {
                    b.HasOne("Entities.EntitySection", "EntitySection")
                        .WithMany("Persons")
                        .HasForeignKey("EntitySectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntitySection");
                });

            modelBuilder.Entity("Entities.EntitySection", b =>
                {
                    b.HasOne("Entities.EntityDepartment", "EntityDepartment")
                        .WithMany()
                        .HasForeignKey("EntityDepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EntityDepartment");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.EntitySection", b =>
                {
                    b.Navigation("Persons");
                });
#pragma warning restore 612, 618
        }
    }
}
